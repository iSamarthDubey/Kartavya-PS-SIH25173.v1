services:
  - type: web
    name: kartavya-fullstack
    env: python
    plan: free
    buildCommand: |
      # Install backend dependencies
      pip install -r backend/requirements.txt
      
      # Install CLI dependencies
      pip install -e cli/
      
      echo "‚úÖ Both backend and CLI installed successfully!"
      
    startCommand: |
      python -c "
      import subprocess
      import threading
      import time
      import os
      import signal
      import sys
      from pathlib import Path
      
      print('üöÄ Starting Kartavya Full Stack...')
      
      # Global process references
      backend_process = None
      
      def signal_handler(signum, frame):
          print('üõë Shutting down gracefully...')
          if backend_process:
              backend_process.terminate()
          sys.exit(0)
      
      signal.signal(signal.SIGTERM, signal_handler)
      signal.signal(signal.SIGINT, signal_handler)
      
      def start_backend():
          '''Start the Kartavya backend server on port 8000'''
          global backend_process
          print('üîß Starting backend server...')
          
          # Set backend environment variables
          env = os.environ.copy()
          env['API_HOST'] = '0.0.0.0'
          env['API_PORT'] = '8000'
          env['ENVIRONMENT'] = 'production'
          env['AUTO_KILL_PORT'] = 'true'
          
          try:
              os.chdir('backend')
              backend_process = subprocess.Popen(['python', 'main.py'], env=env)
              print('‚úÖ Backend server started on port 8000')
              backend_process.wait()  # Keep backend running
          except Exception as e:
              print(f'‚ùå Backend failed to start: {e}')
      
      def start_web_interface():
          '''Start the web interface on the main port'''
          time.sleep(10)  # Give backend time to start
          print('üåê Starting web interface...')
          
          # Create a simple web interface that combines both
          from fastapi import FastAPI, Request, HTTPException
          from fastapi.responses import HTMLResponse, JSONResponse
          from fastapi.middleware.cors import CORSMiddleware
          import uvicorn
          import httpx
          import json
          import asyncio
          
          app = FastAPI(
              title='Kartavya SIEM Full Stack',
              description='Complete SIEM solution with backend API and CLI interface',
              version='1.0.0'
          )
          
          # Add CORS middleware
          app.add_middleware(
              CORSMiddleware,
              allow_origins=['*'],
              allow_credentials=True,
              allow_methods=['*'],
              allow_headers=['*'],
          )
          
          @app.get('/', response_class=HTMLResponse)
          async def dashboard():
              return '''
              <!DOCTYPE html>
              <html>
              <head>
                  <title>üîí Kartavya SIEM - Full Stack</title>
                  <meta charset='utf-8'>
                  <meta name='viewport' content='width=device-width, initial-scale=1'>
                  <style>
                      * { margin: 0; padding: 0; box-sizing: border-box; }
                      body { 
                          font-family: system-ui, -apple-system, sans-serif;
                          background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
                          min-height: 100vh;
                          color: white;
                          line-height: 1.6;
                      }
                      .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
                      .header { text-align: center; margin-bottom: 40px; }
                      .header h1 { font-size: 3.5em; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
                      .header .subtitle { font-size: 1.3em; opacity: 0.9; font-weight: 300; }
                      .status-bar { 
                          display: flex; 
                          justify-content: center; 
                          gap: 40px; 
                          margin: 30px 0; 
                          flex-wrap: wrap;
                      }
                      .status-item { 
                          display: flex; 
                          align-items: center; 
                          gap: 10px; 
                          background: rgba(255,255,255,0.1);
                          padding: 15px 25px;
                          border-radius: 25px;
                          backdrop-filter: blur(10px);
                      }
                      .status-indicator { 
                          width: 12px; 
                          height: 12px; 
                          border-radius: 50%; 
                          background: #4CAF50; 
                          animation: pulse 2s infinite;
                      }
                      @keyframes pulse {
                          0% { opacity: 1; transform: scale(1); }
                          50% { opacity: 0.7; transform: scale(1.1); }
                          100% { opacity: 1; transform: scale(1); }
                      }
                      .grid { 
                          display: grid; 
                          grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); 
                          gap: 25px; 
                          margin: 40px 0;
                      }
                      .card { 
                          background: rgba(255,255,255,0.15);
                          backdrop-filter: blur(15px);
                          border-radius: 20px;
                          padding: 30px;
                          border: 1px solid rgba(255,255,255,0.2);
                          transition: all 0.3s ease;
                          position: relative;
                          overflow: hidden;
                      }
                      .card::before {
                          content: '';
                          position: absolute;
                          top: 0;
                          left: 0;
                          right: 0;
                          height: 3px;
                          background: linear-gradient(90deg, #4CAF50, #45a049);
                      }
                      .card:hover { 
                          transform: translateY(-8px) scale(1.02);
                          background: rgba(255,255,255,0.2);
                      }
                      .card h3 { 
                          font-size: 1.4em; 
                          margin-bottom: 15px; 
                          display: flex; 
                          align-items: center; 
                          gap: 10px;
                      }
                      .card p { margin-bottom: 20px; opacity: 0.9; }
                      .btn { 
                          display: inline-flex;
                          align-items: center;
                          gap: 8px;
                          background: rgba(255,255,255,0.2);
                          color: white;
                          padding: 12px 24px;
                          border-radius: 30px;
                          text-decoration: none;
                          border: 1px solid rgba(255,255,255,0.3);
                          transition: all 0.3s ease;
                          font-weight: 500;
                      }
                      .btn:hover { 
                          background: rgba(255,255,255,0.3);
                          transform: scale(1.05);
                          color: white;
                      }
                      .terminal { 
                          background: #0d1117;
                          color: #58a6ff;
                          padding: 25px;
                          border-radius: 12px;
                          font-family: 'SFMono-Regular', Consolas, monospace;
                          margin: 20px 0;
                          border: 1px solid #30363d;
                          font-size: 14px;
                          line-height: 1.5;
                          overflow-x: auto;
                      }
                      .terminal .comment { color: #8b949e; }
                      .terminal .command { color: #7ee787; }
                      .api-grid {
                          display: grid;
                          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                          gap: 15px;
                          margin: 20px 0;
                      }
                      .api-item {
                          background: rgba(0,0,0,0.3);
                          padding: 15px;
                          border-radius: 8px;
                          border-left: 3px solid #4CAF50;
                      }
                      .method-get { border-left-color: #4CAF50; }
                      .method-post { border-left-color: #2196F3; }
                      .footer { 
                          text-align: center; 
                          margin-top: 60px; 
                          padding: 30px; 
                          border-top: 1px solid rgba(255,255,255,0.1);
                      }
                  </style>
              </head>
              <body>
                  <div class='container'>
                      <div class='header'>
                          <h1>üîí Kartavya SIEM</h1>
                          <p class='subtitle'>AI-Powered Security Information and Event Management</p>
                          <p style='font-size: 0.9em; margin-top: 10px; opacity: 0.8;'>
                              Full Stack Deployment - Backend + CLI + Web Interface
                          </p>
                      </div>
                      
                      <div class='status-bar'>
                          <div class='status-item'>
                              <div class='status-indicator'></div>
                              <span>Backend API (Port 8000)</span>
                          </div>
                          <div class='status-item'>
                              <div class='status-indicator'></div>
                              <span>CLI Interface</span>
                          </div>
                          <div class='status-item'>
                              <div class='status-indicator'></div>
                              <span>NLP Pipeline</span>
                          </div>
                      </div>
                      
                      <div class='grid'>
                          <div class='card'>
                              <h3>ü§ñ AI Assistant</h3>
                              <p>Chat with the AI-powered security assistant using natural language queries for threat analysis and investigation.</p>
                              <a href='/chat' class='btn'>üí¨ Start Chat</a>
                          </div>
                          
                          <div class='card'>
                              <h3>üìä Interactive API</h3>
                              <p>Explore the complete REST API with interactive Swagger documentation and real-time testing.</p>
                              <a href='/backend-docs' class='btn'>üìñ API Docs</a>
                          </div>
                          
                          <div class='card'>
                              <h3>üîç Security Events</h3>
                              <p>Query, filter, and analyze security events across your entire infrastructure in real-time.</p>
                              <a href='/events' class='btn'>üîé Browse Events</a>
                          </div>
                          
                          <div class='card'>
                              <h3>üìà Dashboard</h3>
                              <p>Monitor security metrics, active alerts, system health, and threat intelligence feeds.</p>
                              <a href='/dashboard' class='btn'>üìä View Dashboard</a>
                          </div>
                      </div>
                      
                      <div class='card'>
                          <h3>üñ•Ô∏è CLI Usage Examples</h3>
                          <div class='terminal'>
<span class='comment'># Setup and configuration</span>
<span class='command'>kartavya setup</span>
<span class='comment'># Configure API endpoint and authentication</span>

<span class='comment'># Interactive AI chat</span>
<span class='command'>kartavya chat interactive</span>
<span class='comment'># Start conversation with security assistant</span>

<span class='comment'># Query security events</span>
<span class='command'>kartavya events auth --time-range 1h --output json</span>
<span class='command'>kartavya events failed-logins --query "admin" --limit 100</span>

<span class='comment'># Generate automated reports</span>
<span class='command'>kartavya reports security-summary --time-range 24h</span>
<span class='command'>kartavya reports incident-report --severity critical</span>

<span class='comment'># Advanced query operations</span>
<span class='command'>kartavya query execute "find suspicious PowerShell execution"</span>
<span class='command'>kartavya query optimize "show high severity alerts"</span>
                          </div>
                      </div>
                      
                      <div class='card'>
                          <h3>üîó Available Endpoints</h3>
                          <div class='api-grid'>
                              <div class='api-item method-get'>
                                  <strong>GET</strong> /health<br>
                                  <small>System health check</small>
                              </div>
                              <div class='api-item method-post'>
                                  <strong>POST</strong> /cli<br>
                                  <small>Execute CLI commands</small>
                              </div>
                              <div class='api-item method-get'>
                                  <strong>GET</strong> /backend-docs<br>
                                  <small>Backend API documentation</small>
                              </div>
                              <div class='api-item method-post'>
                                  <strong>POST</strong> /api/assistant/chat<br>
                                  <small>AI chat interface</small>
                              </div>
                          </div>
                          <p style='margin-top: 15px; font-size: 0.9em; opacity: 0.8;'>
                              Backend runs on port 8000, Web interface on main port (10000)
                          </p>
                      </div>
                      
                      <div class='footer'>
                          <p>
                              <strong>Kartavya SIEM v1.0.0</strong> - Built with FastAPI + Python + AI<br>
                              <small>Deployed on Render ‚Ä¢ Full Stack Solution</small>
                          </p>
                      </div>
                  </div>
              </body>
              </html>
              '''
          
          @app.get('/health')
          async def health_check():
              '''Combined health check for both backend and CLI'''
              backend_healthy = False
              backend_info = {}
              
              try:
                  async with httpx.AsyncClient() as client:
                      response = await client.get('http://localhost:8000/health', timeout=5)
                      if response.status_code == 200:
                          backend_healthy = True
                          backend_info = response.json()
              except Exception as e:
                  backend_info = {'error': str(e)}
              
              return {
                  'status': 'healthy' if backend_healthy else 'degraded',
                  'services': {
                      'web_interface': True,
                      'backend_api': backend_healthy,
                      'cli_available': True
                  },
                  'backend_info': backend_info,
                  'ports': {
                      'web': int(os.environ.get('PORT', 10000)),
                      'backend': 8000
                  }
              }
          
          @app.post('/cli')
          async def execute_cli_command(request: Request):
              '''Execute CLI commands via API'''
              try:
                  data = await request.json()
                  command = data.get('command', 'kartavya --help')
                  
                  env = os.environ.copy()
                  env['KARTAVYA_API_URL'] = 'http://localhost:8000'
                  env['KARTAVYA_COLOR'] = 'false'
                  env['KARTAVYA_OUTPUT_FORMAT'] = 'json'
                  
                  result = subprocess.run(
                      command.split(),
                      capture_output=True,
                      text=True,
                      env=env,
                      timeout=60,
                      cwd='/opt/render/project/src/cli'
                  )
                  
                  return {
                      'success': result.returncode == 0,
                      'command': command,
                      'output': result.stdout,
                      'error': result.stderr,
                      'return_code': result.returncode
                  }
              except Exception as e:
                  return {
                      'success': False,
                      'error': str(e),
                      'command': command if 'command' in locals() else 'unknown'
                  }
          
          # Proxy all /api/* requests to backend
          @app.api_route('/api/{path:path}', methods=['GET', 'POST', 'PUT', 'DELETE', 'PATCH'])
          async def proxy_backend(path: str, request: Request):
              '''Proxy requests to backend API'''
              backend_url = f'http://localhost:8000/api/{path}'
              
              async with httpx.AsyncClient() as client:
                  try:
                      body = await request.body() if request.method in ['POST', 'PUT', 'PATCH'] else None
                      
                      response = await client.request(
                          method=request.method,
                          url=backend_url,
                          params=dict(request.query_params),
                          headers={k: v for k, v in request.headers.items() if k.lower() not in ['host', 'content-length']},
                          content=body,
                          timeout=60
                      )
                      
                      content = response.content
                      try:
                          content = response.json()
                      except:
                          content = response.text
                      
                      return JSONResponse(content=content, status_code=response.status_code)
                  except Exception as e:
                      return JSONResponse(
                          content={'error': f'Backend request failed: {str(e)}'},
                          status_code=502
                      )
          
          # Redirect for backend docs
          @app.get('/backend-docs')
          async def backend_docs():
              '''Redirect to backend API documentation'''
              return JSONResponse({
                  'message': 'Backend API Documentation',
                  'docs_url': 'http://localhost:8000/api/docs',
                  'note': 'Backend documentation is available at port 8000'
              })
          
          # Chat interface
          @app.get('/chat')
          async def chat_interface():
              '''Simple chat interface'''
              return JSONResponse({
                  'message': 'Chat with Kartavya AI Assistant',
                  'usage': 'POST to /api/assistant/chat with {"query": "your question"}',
                  'example': {
                      'endpoint': '/api/assistant/chat',
                      'method': 'POST',
                      'body': {'query': 'Show me failed login attempts from last hour'}
                  }
              })
          
          # Start web server
          port = int(os.environ.get('PORT', 10000))
          print(f'üåê Starting web interface on port {port}')
          uvicorn.run(app, host='0.0.0.0', port=port, log_level='info')
      
      try:
          # Start backend in background thread
          print('üîÑ Starting background services...')
          backend_thread = threading.Thread(target=start_backend, daemon=True)
          backend_thread.start()
          
          # Start web interface in main thread
          start_web_interface()
          
      except KeyboardInterrupt:
          print('üõë Received shutdown signal')
          if backend_process:
              backend_process.terminate()
      except Exception as e:
          print(f'üí• Fatal error: {e}')
          if backend_process:
              backend_process.terminate()
          sys.exit(1)
      "
    
    envVars:
      # Backend configuration
      - key: API_HOST
        value: "0.0.0.0"
      - key: API_PORT
        value: "8000"
      - key: ENVIRONMENT
        value: "production"
      - key: AUTO_KILL_PORT
        value: "true"
      
      # CLI configuration
      - key: KARTAVYA_API_URL
        value: "http://localhost:8000"
      - key: KARTAVYA_COLOR
        value: "false"
      - key: KARTAVYA_OUTPUT_FORMAT
        value: "json"
      
      # Web interface
      - key: PORT
        value: "10000"
      
      # Optional: Add your secrets here
      # - key: KARTAVYA_API_TOKEN
      #   value: "your-secret-token"
